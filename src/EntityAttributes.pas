unit EntityAttributes;

interface

uses
  SysUtils, StrUtils, Generics.Collections, System.TypInfo, Rtti;

type
  Table = class(TCustomAttribute)
  private
    FName : string;
    FSchema : string;
    function GetFullName: string;
  public
    constructor Create(const AName: string; const ASchema: string = '');

    property Name: string read FName;
    property Schema: string read FSchema;
    property FullName: string read GetFullName;
  end;

  TColProp = (
    cpPrimaryKey,
    cpUnique,
    cpNotNull,
    cpAutoGenerated
  );

  TColProps = set of TColProp;

  Column = class(TCustomAttribute)
  private
    FName : string;
    FLength: Integer;
    FPrecision: Integer;
    FScale: Integer;
    FColProps : TColProps;
    function GetIsPrimaryKey: Boolean;
    function GetIsAutoGenerated: Boolean;
  public
    constructor Create(const AName : string) overload;
    constructor Create(const AName : string;
                       AColProps: TColProps;
                       ALength: Integer=0;
                       APrecision: Integer=0;
                       AScale: Integer=0); overload;
    constructor Create(AColProps: TColProps;
                       ALength: Integer=0;
                       APrecision: Integer=0;
                       AScale: Integer=0); overload;

    property Name: string read FName write FName;
    property Length: Integer read FLength write FLength;
    property Precision: Integer read FPrecision write FPrecision;
    property Scale: Integer read FScale write FScale;
    property ColProps: TColProps read FColProps write FColProps;
    property IsPrimaryKey: Boolean read GetIsPrimaryKey;
    property IsAutoGenerated: Boolean read GetIsAutoGenerated;
  end;

  NotMapped = class(TCustomAttribute)
  end;

  HasOne = class(TCustomAttribute)
  private
    FFilterPropertyName : string;
    FValuePropertyName : string;
  public
    constructor Create(const AFilterPropertyName: string; const AValuePropertyName: string);
    property FilterPropertyName: string read FFilterPropertyName write FFilterPropertyName;
    property ValuePropertyName: string read FValuePropertyName write FValuePropertyName;
  end;

  HasMany = class(TCustomAttribute)
  private
    FFilterPropertyName : string;
    FValuePropertyName : string;
  public
    constructor Create(const AFilterPropertyName: string; const AValuePropertyName: string);
    property FilterPropertyName: string read FFilterPropertyName write FFilterPropertyName;
    property ValuePropertyName: string read FValuePropertyName write FValuePropertyName;
  end;

implementation

uses
  System.Classes;

constructor Table.Create(const AName, ASchema: string);
begin
  inherited Create;
  FName := AName;
  FSchema := ASchema;
end;

function Table.GetFullName: string;
begin
  Result := IfThen(FSchema='', FName, FSchema + '.' + FName);
end;

constructor Column.Create(const AName: string);
begin
  Create(AName, []);
end;

constructor Column.Create(const AName: string; AColProps: TColProps; ALength, APrecision, AScale: Integer);
begin
  inherited Create;
  FName := AName;
  FColProps := AColProps;
  FLength := ALength;
  FPrecision := APrecision;
  FScale := AScale;
end;

constructor Column.Create(AColProps: TColProps; ALength, APrecision, AScale: Integer);
begin
  inherited Create;
  FName := '';
  FColProps := AColProps;
  FLength := ALength;
  FPrecision := APrecision;
  FScale := AScale;
end;

function Column.GetIsAutoGenerated: Boolean;
begin
  Result := cpAutoGenerated in FColProps;
end;

function Column.GetIsPrimaryKey: Boolean;
begin
  Result := cpPrimaryKey in FColProps;
end;

constructor HasOne.Create(const AFilterPropertyName: string; const AValuePropertyName: string);
begin
  FFilterPropertyName := AFilterPropertyName;
  FValuePropertyName := AValuePropertyName;
end;

constructor HasMany.Create(const AFilterPropertyName: string; const AValuePropertyName: string);
begin
  FFilterPropertyName := AFilterPropertyName;
  FValuePropertyName := AValuePropertyName;
end;

end.
